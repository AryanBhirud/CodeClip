
// cmd\main.go
package main

import (
    "fmt"
    "codeclip/internal/scrapper"
)

func main() {
    rootDir := "./" // specify the directory to scrape
    outputFile := "codebase_dump.txt"

    fmt.Println("Scraping codebase...")

    // Collect and save the codebase
    content, err := scraper.CollectCodebaseContent(rootDir)
    if err != nil {
        fmt.Printf("Error collecting codebase: %v\n", err)
        return
    }

    // Write content to file
    err = scraper.WriteToFile(outputFile, content)
    if err != nil {
        fmt.Printf("Error writing to file: %v\n", err)
        return
    }

    fmt.Printf("Codebase content saved to %s\n", outputFile)

    // Copy content to clipboard
    err = scraper.CopyToClipboard(content)
    if err != nil {
        fmt.Printf("Error copying to clipboard: %v\n", err)
    } else {
        fmt.Println("Codebase content copied to clipboard successfully.")
    }
}


// go.mod
module codeclip

go 1.22.0

require github.com/atotto/clipboard v0.1.4


// go.sum
github.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=
github.com/atotto/clipboard v0.1.4/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=


// internal\scrapper\Clipboard.go
package scraper

import "github.com/atotto/clipboard"

func CopyToClipboard(content string) error {
    return clipboard.WriteAll(content)
}


// internal\scrapper\Scrapper.go
package scraper

import (
    "fmt"
    "io/ioutil"
    "os"
    "path/filepath"
    "strings"
)

func CollectCodebaseContent(root string) (string, error) {
    var contentBuilder strings.Builder

    err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
        if err != nil {
            return err
        }

        if !info.IsDir() {
            fileContent, err := ioutil.ReadFile(path)
            if err != nil {
                return err
            }
            contentBuilder.WriteString(fmt.Sprintf("\n// %s\n", path))
            contentBuilder.Write(fileContent)
            contentBuilder.WriteString("\n")
        }
        return nil
    })
    if err != nil {
        return "", err
    }
    return contentBuilder.String(), nil
}

func WriteToFile(filename, content string) error {
    return ioutil.WriteFile(filename, []byte(content), 0644)
}

